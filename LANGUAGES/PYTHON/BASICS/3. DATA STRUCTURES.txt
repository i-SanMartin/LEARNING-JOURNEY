MORE ON LISTS

  -list.append(x)
    Add an item to the end of the list. Equivalent to a[len(a):] = [x].
  -list.extend(iterable)
    Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.
  -list.insert(i, x)
    Insert an item at a given position. The first argument is the index of the element before which to insert.
  -list.remove(x)
    Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.
  -list.pop([i])
    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list.
    It raises an IndexError if the list is empty or the index is outside the list range.
  -list.clear()
    Remove all items from the list. Equivalent to del a[:]
  -ist.index(x[, start[, end]])
    Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item
  -list.count(x)
    Return the number of times x appears in the list.
  -list.sort(*, key=None, reverse=False)
    Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
  -list.reverse()
    Reverse the elements of the list in place.
  -list.copy()
    Return a shallow copy of the list. Equivalent to a[:].

  -lists can be used as stacks last-in, first-out with append and pop.

  -list can also be used as queues fifo, with append and popleft, after import deque from collections.

  -better way to define lists
    squares = list(map(lambda x: x**2, range(10)))
    squares = [x**2 for x in range(10)]
    [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]

DEL STATEMENT
  -same as pop but doesnÂ´t return value.
    del a[0]

TUPLES AND SEQUENCES
  -A tuple is a number of values separated by comas
    t = 12345, 54321, 'hello!'
  -Tuples are not mutables but can containt mutable objects like lists.

SETS
  -Unordered collection with two duplicated elements.
  -Useful for membersip testing or eleminating duplicated entries.
  -Non suscriptable but can acces values as a, b =set(list)
    basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
    print(basket)                      # show that duplicates have been removed
    {'orange', 'banana', 'pear', 'apple'}

    a = set('abracadabra')
    b = set('alacazam')
    a                                  # unique letters in a
    {'a', 'r', 'b', 'c', 'd'}
    a - b                              # letters in a but not in b
    {'r', 'd', 'b'}


DICTIONARIES
  -Can be indexed with keys. Keys are uniques
  -Tuples can be used as keys if the tuple does not have any mutable object.
  -If turned into list will give a list with a tuple for each value-key pair.
    tel = {'jack': 4098, 'sape': 4139}
    tel['guido'] = 4127
    tel
    {'jack': 4098, 'sape': 4139, 'guido': 4127}

LOOPING TECHNIQUES
  -With a dictionary can be iterated through keys and values using the method items().
    knights = {'gallahad': 'the pure', 'robin': 'the brave'}
    for k, v in knights.items():
        print(k, v)

  -Use enumerate() to obtain the index
    for i, v in enumerate(['tic', 'tac', 'toe']):
        print(i, v)

  -With zip() a loop can iterate through two or more lists.
    for q, a in zip(questions, answers):
        print('What is your {0}?  It is {1}.'.format(q, a))        

  -In range the step and direction can be modified with the thirth argument.
    for i in reversed(range(1, 10, 2)):
        print(i)

  -Using set elimenate duplicated elements.
    for f in sorted(set(basket)):
        print(f)

MORE ON CONDITIONS
  -Conditions in if or while can contain any operator.
  -The operator 'in' and 'not in' are membership test.
  -'is' or 'is not' compare' wether two objects are the same object.
  -Comparison can be changed c>b==a chechs if c>b and if b == a.
  -'not' highest priority, then

COMPARING SEQUENCES AND OTHER TYPES
  -The first element are compared and if the comparison is not concluded continues with the next ones.
  -The sequences that finishes first would be the "lesser" one.


WHILE
  -Executes the loop as long as the condition is met.
    # Fibonacci series:
    # the sum of two elements defines the next
    a, b = 0, 1
    while a < 10:
        print(a)
        a, b = b, a+b

  -The condition can be any type: int, list, string...
  -Any non zero value is considered as True

IF
  -Executes the code inside the 'if' if the condition is met.
  -There can be 0 or more elif and the else part is optional.
    x = int(input("Please enter an integer: "))
    Please enter an integer: 42
    if x < 0:
        x = 0
        print('Negative changed to zero')
    elif x == 0:
        print('Zero')
    elif x == 1:
        print('Single')
    else:
        print('More')

FOR
  -Iterates over the elements of any sequence (list,string...).
    # Measure some strings:
    words = ['cat', 'window', 'defenestrate']
    for w in words:
        print(w, len(w))
  -It can be used to modify elements of a collection.
    # Create a sample collection
    users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
    
    # Strategy:  Iterate over a copy
    for user, status in users.copy().items():
        if status == 'inactive':
            del users[user]
    
    # Strategy:  Create a new collection
    active_users = {}
    for user, status in users.items():
        if status == 'active':
        active_users[user] = status

  -range() function generates arithmetic progressions. Handy to use with for loops
    for i in range(5):
      print(i)
  -other ways to use range():
    list(range(5, 10))
    [5, 6, 7, 8, 9]
    
    list(range(0, 10, 3))
    [0, 3, 6, 9]
    
    list(range(-10, -100, -30))
    [-10, -40, -70]

BREAK, CONTINUE AND ELSE IN LOOPS
  -'break' breaks out of the innermost for or while loop.

  -In a for loop 'else' executes after the final iteration.
  -In a while loop 'else executes when teh condition is not met.
  -'else' it is not executed if loop ends because 'break' instruction.

  -'continue' ends current iteration and starts the next one.

PASS
  'pass' doesn´t do anything:
    while True:
      pass  # Busy-wait for keyboard interrupt (Ctrl+C)

    def initlog(*args):
      pass   # Remember to implement this!
  
MATCH
  -'match' statement takes an expression and compares its value with successive values.
  -Only the first pattern that matches is executed.
    def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the internet"
  '_' works for every value.

FUNCTIONS
  -The keyword 'def' introduces a function definition.
  -It must be followed by the function name ant the formal arguments between brackets.
  -The first line can be a string, that will be the function documentation string.
  -The execution of a function creates its own symbol table.
  -References to a variable will look first in the local simbol table, 
  then local symbol tables of enclosing functions, then the global symbol table,
  and finally the the table of built-in names.
  -Non local variables can be referenced but not assigned with values.
  -The arguments are introduced in the local symbol table.
  -When a function is called recursively new local symbol tables are created.
    def fib(n):    # write Fibonacci series up to n
        """Print a Fibonacci series up to n."""
        a, b = 0, 1
        while a < n:
            print(a, end=' ')
            a, b = b, a+b
        print()
    
    # Now call the function we just defined:
    fib(2000)

  -A function can be assigned to a variable
    f = fib
    f(100)

  -When using 'return' a value is returned by the function.
  -When doing something like 1 list = [] 2 list.append(1), what we are doing is calling a method of the class List.
    
MORE ON FUNCTIONS
  -Default argument values, the function can be called with fewer arguments than it is declared.
  -The value is evaluated only once. For mutable objects like lists may cause not to have the default value.

  -When a final formal parameter starts with ** will receive a dictionary with all keywords parameters that doesnt match formal parameters.
  -Combined with an argumetn starting with * before, will receive a tuple of all positional arguments passed to the function

  -def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2)
  -/ and * are optional, before / positional args, before * positional or keyword, after * only keyword

  -Unpacking argument list with a * before the argument.
    list(range(3, 6))            # normal call with separate arguments
    [3, 4, 5]
    args = [3, 6]
    list(range(*args))            # call with arguments unpacked from a list
    [3, 4, 5]

  -lambda expressions create small anonymous functions, limitated to one line.
    def make_incrementor(n):
        return lambda x: x + n
    
    f = make_incrementor(42)
    f(0)#f is now the lambda function
    42
    f(1)
    43
  -Also used as arguments
    pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
    pairs.sort(key=lambda pair: pair[1])
    pairs
    [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
